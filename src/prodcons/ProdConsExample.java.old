package prodcons;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import static java.lang.String.format;

/**
 * @author slukjanov aka Frostman
 */
public class ProdConsExample {
    private static final AtomicInteger NEXT_RES_ID = new AtomicInteger(1);

    private final BlockingQueue<Resource> resources = new LinkedBlockingQueue<Resource>();
    private final CountDownLatch notProduced;
    private final CountDownLatch notConsumed;

    private int resourcesCount;
    private int producers;
    private int consumers;

    public ProdConsExample(int resourcesCount, int producers, int consumers) {
        this.resourcesCount = resourcesCount;
        this.producers = producers;
        this.consumers = consumers;

        this.notProduced = new CountDownLatch(resourcesCount);
        this.notConsumed = new CountDownLatch(resourcesCount);
    }

    public static void main(String[] args) {
        new ProdConsExample(100, 1, 10).demo();
    }

    public void demo() {
        System.out.println(format("Starting producer - consumer demo with %s producer, %s consumers and %s resources"
                , producers, consumers, resourcesCount));

        while (consumers-- > 0) {
            new Consumer().start();
        }

        System.out.println("Consumers ready");

        while (producers-- > 0) {
            new Producer().start();
        }

        System.out.println("Producers ready, working...");

        try {
            notProduced.await();
        } catch (InterruptedException e) {
            System.err.println("Waiting for all resources produced is interrupted");
            e.printStackTrace();
        }

        System.out.println("All resources produced");

        try {
            notConsumed.await();
        } catch (InterruptedException e) {
            System.err.println("Waiting for all resources consumed is interrupted");
            e.printStackTrace();
        }

        System.out.println("All resources consumed");
    }

    public final class Resource {
        private final int id = NEXT_RES_ID.getAndIncrement();

        public void produced() {
            System.out.println("Produced: #" + id);
        }

        public void consumed() {
            System.out.println("Consumed: #" + id);
        }
    }

    public final class Producer implements Runnable {
        private final Thread thread = new Thread(this);

        public void start() {
            thread.start();
        }

        public void run() {
            while (notProduced.getCount() > 0) {
                Resource resource = new Resource();
                try {
                    resources.put(resource);
                } catch (InterruptedException e) {
                    System.err.println("Waiting for free space in resources queue is interrupted");
                    e.printStackTrace();
                }

                resource.produced();
                notProduced.countDown();
            }
        }
    }

    public final class Consumer implements Runnable {
        private final Thread thread = new Thread(this);

        public void start() {
            thread.start();
        }

        public void run() {
            while (notConsumed.getCount() > 0) {
                Resource resource = null;
                try {
                    resource = resources.poll(100, TimeUnit.MILLISECONDS);
                } catch (InterruptedException e) {
                    System.out.println("Waiting for element in resources queue is interrupted");
                    e.printStackTrace();
                }
                if (resource == null) {
                    continue;
                }

                resource.consumed();
                notConsumed.countDown();
            }
        }
    }

}
